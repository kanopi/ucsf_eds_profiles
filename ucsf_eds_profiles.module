<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Extension\ModuleHandlerInterface;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Symfony\Component\Ldap\LdapInterface;

define("UCSF_EDS_PROFILES_PROFILES_BASE_URL", "http://api.profiles.ucsf.edu/json/v2/?publications=full&source=ucsf_eds_profiles_drupal8_module");

/**
 * Implements hook_cron().
 *
 * Adds ucsf_eds and ucsf_profiles nodes to the queue system to be synchronized.
 */
function ucsf_eds_profiles_cron() {
  // How often to run in seconds, default one week.
  $delta =  \Drupal::config('ucsf_eds_profiles.settings')->get('cron_delta', 604800);
  // When was the cron last run
  $last_run = \Drupal::config('ucsf_eds_profiles.settings')->get('cron_last_run', 0);

  // If more than $delta seconds have past since nodes were updated, update them.
  if ($last_run + $delta < time()) {
    // Store the current runtime.
    $request_time = \Drupal::time()->getRequestTime();
    \Drupal::configFactory()->getEditable('ucsf_eds_profiles.settings')->set('cron_last_run', $request_time)->save();
    // Log cron run.
    ucsf_eds_profiles_message_log('info', 'Adding all available EDS and Profiles nodes to the queue.');

    // Search for EDS/Profiles nodes.
    $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'ucsf_eds_profiles']);

    if (!empty($nodes)) {
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('ucsf_eds_profiles_sync');
      foreach ($nodes as $node) {
        $queue->createItem($node);
      }
    }
  }
}

/*
 * Updates ucsf_eds_profiles node with EDS (source) data.
 */
function ucsf_eds_profiles_node_sync(NodeInterface $node) {

  // Get ldap server machine name.
  $ldap_mn = \Drupal::config('ucsf_eds_profiles.settings')->get('ldap_mn');
  if (empty($ldap_mn)) {
    ucsf_eds_profiles_message_log('error', 'Ldap server name missing in /admin/config/ucsf_eds_profiles');
    return FALSE;
  }

  // Connect ldap service.
  static $bind;
  $ldap_bridge = \Drupal::service('ldap.bridge');
  $ldap_bridge->setServerById($ldap_mn);
  if (!isset($bind)) {
    $bind = $ldap_bridge->bind();
    if (empty($bind)) {
      ucsf_eds_profiles_message_log('error', 'Ldap bind failed: %ldap_mn', ['%ldap_mn' => $ldap_mn]);
      return FALSE;
    }
  }
  elseif ($bind === FALSE) {
    return FALSE;
  }

  $ldap = $ldap_bridge->get();
  if (empty($ldap)) {
    ucsf_eds_profiles_message_log('error', 'Ldap server undefined.');
    return FALSE;
  }

  // Get ucsf_eds node mail fieldname.
  // $email_fn = \Drupal::config('ucsf_eds_profiles.settings')->get('email_fn');
  // if (!$node->hasField($email_fn)) {
  //   // @todo log email field does not exist
  //   dpm('required ucsf_eds email field does not exist.');
  //   return FALSE;
  // }

  // Use email value to do eds ldap lookup.
  $email = $node->label();
  if (empty($email)) {
    ucsf_eds_profiles_message_log('error', 'Required email value missing.');
    return FALSE;
  }

  // Get ldap record.
  $eds = ucsf_eds_profiles_ldap_search_by_email($ldap, $email);

  // No EDS record, set archive flag.
  // @todo set archive flag?
  if ($eds === NULL) {
    return FALSE;
  }

  // EDS connection bad, log and do nothing for now.
  if ($eds === FALSE) {
    ucsf_eds_profiles_message_log('error', 'EDS search by email failed - unable to continue node sync.');
    return FALSE;
  }

  $uid = ($eds) ? $eds->getAttribute('uid')[0] : NULL;
  $eds_addr_campus = ($uid) ? ucsf_eds_profiles_ldap_search_address_by_uid($ldap, $uid, 'Campus Address') : FALSE;
  $eds_addr_practice = ($uid) ? ucsf_eds_profiles_ldap_search_address_by_uid($ldap, $uid, 'Private Practice Address') : FALSE;

  $dept_num = ($eds) ? $eds->getAttribute('ucsfEduPrimaryDepartmentNumber')[0] : NULL;
  $eds_dept = ($dept_num) ? ucsf_eds_profiles_ldap_search_dept($ldap, $dept_num) : FALSE;

  // Array to hold data to give hooks a chance to modify before saving.
  $values = [];

  // Put EDS data into $values.
  foreach (ucsf_eds_profiles_eds_field_map() as $fn => $source_fn) {
    if ($node->hasField($fn)) {
      switch ($fn) {
        case 'field_ucsfeds_address':
        case 'field_ucsfeds_phone':
        case 'field_ucsfeds_phonereleasecode':
          $values[$fn] = ($eds_addr_campus && $eds_addr_campus->hasAttribute($source_fn)) ? $eds_addr_campus->getAttribute($source_fn)[0] : NULL;
          break;
        case 'field_ucsfeds_addressp':
        case 'field_ucsfeds_phonep':
        case 'field_ucsfeds_phonereleasecodep':
          $values[$fn] = ($eds_addr_practice && $eds_addr_practice->hasAttribute($source_fn)) ? $eds_addr_practice->getAttribute($source_fn)[0] : NULL;
          break;
        case 'field_ucsfeds_primarydeptorunit':
          $values[$fn] = ($eds_dept && $eds_dept->hasAttribute($source_fn)) ? $eds_dept->getAttribute($source_fn)[0] : NULL;
          break;
        default:
          $values[$fn] = ($eds && $eds->hasAttribute($source_fn)) ? $eds->getAttribute($source_fn)[0] : NULL;
      }
    }
  }

  // Put Profiles data into $values, if it exists.
  $ucid = ($eds) ? $eds->getAttribute('ucsfEduIDNumber')[0] : NULL;
  $profile = ($ucid) ? ucsf_eds_profiles_profile_search_by_ucid($ucid) : FALSE;
  if ($profile !== FALSE) {
    foreach (ucsf_eds_profiles_profiles_field_map() as $fn => $source_fn) {
      if ($node->hasField($fn)) {
        switch ($fn) {
          case 'field_ucsfeds_prfpublications':
            // Gets all PublicationID for this person.
            $pids = (!empty($profile[$source_fn])) ? array_column($profile[$source_fn], 'PublicationID') : NULL;
            if ($pids) {
              // Create/update Publication nodes and gets back [pid => node id].
              $p_nids = ucsf_eds_profiles_publications_sync($profile[$source_fn]);
              foreach ($pids as $index => $pid) {
                $values[$fn][$index] = (isset($p_nids[$pid])) ? ['target_id' => $p_nids[$pid]] : NULL;
              }
            }
            else {
              $values[$fn] = NULL;
            }
            break;
          case 'field_ucsfeds_prfawardshonors':
            $values[$fn] = (!empty($profile[$source_fn])) ? array_column($profile[$source_fn], 'Summary') : NULL;
            break;
          case 'field_ucsfeds_prfcollabinterests':
            $values[$fn] = (!empty($profile[$source_fn])) ? explode(', ', $profile[$source_fn]['Summary']) : NULL;
            break;
          default:
            $values[$fn] = (!empty($profile[$source_fn])) ? $profile[$source_fn] : NULL;
        }
      }
    }
  }

  // Remove values with release codes that are not in the allowed release codes setting.
 $allowed_release_codes = \Drupal::config('ucsf_eds_profiles.settings')->get('allowed_release_codes');

 if (isset($values['field_ucsfeds_emailreleasecode']) && isset($values['field_ucsfeds_email'])) {
    if (!in_array($values['field_ucsfeds_emailreleasecode'], $allowed_release_codes)) {
      $values['field_ucsfeds_email'] = NULL;
    }
  }
  if (isset($values['field_ucsfeds_faxreleasecode']) && isset($values['field_ucsfeds_fax'])) {
    if (!in_array($values['field_ucsfeds_faxreleasecode'], $allowed_release_codes)) {
      $values['field_ucsfeds_fax'] = NULL;
    }
  }
  if (isset($values['field_ucsfeds_phonereleasecode']) && isset($values['field_ucsfeds_phone'])) {
    if (!in_array($values['field_ucsfeds_phonereleasecode'], $allowed_release_codes)) {
      $values['field_ucsfeds_phone'] = NULL;
    }
  }
  if (isset($values['field_ucsfeds_phonereleasecodep']) && isset($values['field_ucsfeds_phonep'])) {
    if (!in_array($values['field_ucsfeds_phonereleasecodep'], $allowed_release_codes)) {
      $values['field_ucsfeds_phonep'] = NULL;
    }
  }
  if (isset($values['field_ucsfeds_entryreleasecode'])) {
    if (!in_array($values['field_ucsfeds_entryreleasecode'], $allowed_release_codes)) {
      foreach (ucsf_eds_profiles_eds_field_map() as $fn => $v) {
        if (isset($values[$fn])) {
          $values[$fn] = NULL;
        }
      }
      foreach (ucsf_eds_profiles_profiles_field_map() as $fn => $v) {
        if (isset($values[$fn])) {
          $values[$fn] = NULL;
        }
      }
    }
  }

  // Allow hook to add additional fields for synchronization or modify existing values.
  $values = \Drupal::moduleHandler()->invokeAll('ucsf_eds_profiles_node_sync_pre_save', [$values, $node, $eds, $eds_addr_campus, $eds_addr_practice, $eds_dept, $profile]);

  // Set node fields to stored and processed values, and set save flag to TRUE if any values will change from the previous revision.
  $save_flag = ($node->isNew()) ? TRUE : FALSE;
  $unchanged = ($nid = $node->id()) ? \Drupal::entityTypeManager()->getStorage('node')->loadUnchanged($nid) : NULL;
  foreach ($values as $fn => $value) {
    if ($node->hasField($fn)) {
      $node->set($fn, $value);
      if (!$save_flag && !($node->{$fn}->equals($unchanged->{$fn}))) {
        $save_flag = TRUE;
      }
    }
  }

  // Only save node if values have changed.
  if ($save_flag) {
    // @todo maybe log changes?
    $node->set('revision_log', 'Node synchronized with source data at UCSF EDS and UCSF Profiles.');
    $node->setNewRevision();
    $node->save();
    return TRUE;
  }
  else {
    // @todo maybe log no changes?
    return FALSE;
  }
}

/**
 * Creates new or updates existing UCSF Profiles Publications nodes.
 *
 * @param array $publications
 *   An array of publication data from UCSF Profiles api call for a single person.
 * @return array
 *   An array of PublicationID to NID.
 *
 * @see ucsf_eds_profiles_node_sync().
 */
function ucsf_eds_profiles_publications_sync(array $publications) {
  // Find existing publication nodes keyed by PublicationID.
  $pids = array_column($publications, 'PublicationID');
  $database = \Drupal::database();
  $sql = "SELECT field_ucsfpfpub_publicationid_uri, entity_id FROM {node__field_ucsfpfpub_publicationid} WHERE field_ucsfpfpub_publicationid_uri IN (:pids[])";
  $query = $database->query($sql, [':pids[]' => $pids]);
  $p_nids = $query->fetchAllKeyed(0, 1);

  // Create or update Publications nodes.
  foreach ($pids as $index => $pid) {
    $node = (isset($p_nids[$pid])) ? Node::load($p_nids[$pid]) : Node::create(['type' => 'ucsf_profiles_publication']);
    $save_flag = ($node->isNew()) ? TRUE : FALSE;

    foreach (ucsf_eds_profiles_publications_field_map() as $p_fn => $p_source_fn) {
      if ($node->hasField($p_fn)) {
        $node_value = $node->{$p_fn}->getString();
        switch ($p_fn) {
          case 'field_ucsfpfpub_sourcename':
          case 'field_ucsfpfpub_sourceurl':
          case 'field_ucsfpfpub_pmid':
            $source_value = $publications[$index]['PublicationSource'][0][$p_source_fn];
            break;
          default:
            $source_value = $publications[$index][$p_source_fn];
        }
        if ($node_value != $source_value) {
          $node->set($p_fn, $source_value ?? NULL);
          $save_flag = TRUE;
        }
      }
    }
    if ($save_flag) {
      try {
        $node->set('revision_log', 'Node synchronized with source data at UCSF Profiles.');
        $node->setNewRevision();
        $node->save();
      } catch (Exception $e) {
        ucsf_eds_profiles_message_log('error', 'Failed to save publication: %message', ['%message'=>$e->getMessage()]);
      }
    }

    // Only sets an nid if a publication was successfully created or already existed.
    if (($nid = $node->id()) !== NULL) {
      $p_nids[$pid] = $nid;
    }
  }

  return $p_nids;
}

/*
 * Implements hook_ucsf_eds_profiles_node_sync_pre_save().
 */
function ucsf_eds_profiles_ucsf_eds_profiles_node_sync_pre_save($values, $node, $eds, $eds_addr_campus, $eds_addr_practice, $eds_dept, $profile) {
  // Do nothing, but this must be done for invokeall to work.
  return $values;
}


/**
 * Performs EDS LDAP search.
 *
 * @param LdapInterface $ldap
 * @param string $base_dn
 * @param string $filter
 * @return Symfony\Component\Ldap\Entry, NULL, or FALSE
 *   Returns ldap entry, NULL on no result, or FALSE on ldap error.
 */
function ucsf_eds_profiles_ldap_search(LdapInterface $ldap, $base_dn, $filter) {
  try {
    $result = $ldap->query($base_dn, $filter)->execute();
    if (!empty($result[0])) {
      return $result[0];
    }
    else {
      return NULL;
    }
  } catch (Exception $e) {
    ucsf_eds_profiles_message_log('error', 'Ldap search error: %message', ['%message'=>$e->getMessage()]);
    return FALSE;
  }
}

function ucsf_eds_profiles_ldap_search_by_email(LdapInterface $ldap, $email) {
  return ucsf_eds_profiles_ldap_search($ldap, 'ou=people,dc=ucsf,dc=edu', 'mail=' . $email);
}

function ucsf_eds_profiles_ldap_search_by_ucid(LdapInterface $ldap, $ucid) {
  return ucsf_eds_profiles_ldap_search($ldap, 'ou=people,dc=ucsf,dc=edu', 'ucsfEduIDNumber=' . $ucid);
}

function ucsf_eds_profiles_ldap_search_dept(LdapInterface $ldap, $dept_num) {
  return ucsf_eds_profiles_ldap_search($ldap, 'ou=departments,dc=ucsf,dc=edu', 'ou=' . $dept_num);
}

function ucsf_eds_profiles_ldap_search_address_by_uid(LdapInterface $ldap, $uid, $address_type='Campus Address') {
  return ucsf_eds_profiles_ldap_search($ldap, 'cn=' . $address_type . ',uid=' . $uid . ',ou=people,dc=ucsf,dc=edu', "cn=" . $address_type);
}

/**
 * Gets UCSF Profiles data.
 *
 * @param string $url
 *   URL for UCSF Profiles API get call.
 * @return array or FALSE
 */
function ucsf_eds_profiles_profile_search($url) {
  try {
    $client = \Drupal::httpClient();
    $response = $client->get($url);
    $code = $response->getStatusCode();
    $data = $response->getBody();
    $profile = json_decode($data, TRUE);
    if (!empty($profile['Profiles'][0])) {
      return $profile['Profiles'][0];
    }
    else {
      ucsf_eds_profiles_message_log('error', 'Malformed profiles data.');
      return FALSE;
    }
  } catch (Exception $e) {
    $code = $e->getCode();
    if ($code == 404) {
      return [];
    }
    else {
      ucsf_eds_profiles_message_log('error', 'Profiles search failed: %message', ['%message'=>$e->getMessage()]);
      return FALSE;
    }
  }
}

function ucsf_eds_profiles_profile_search_by_ucid($ucid) {
  return ucsf_eds_profiles_profile_search(UCSF_EDS_PROFILES_PROFILES_BASE_URL.'&EmployeeID='.$ucid);
}

/**
 * Helper function to get local field name to EDS attribute name.
 * Local field names are module defaults.
 * Do not alter this function if your fields are different from the default.
 * Instead, implement hook_ucsf_eds_profiles_node_sync_pre_save().
 */
function ucsf_eds_profiles_eds_field_map() {
  return [
    'field_ucsfeds_address' => 'postalAddress',
    'field_ucsfeds_addressp' => 'postalAddress',
    'field_ucsfeds_degrees' => 'ucsfEduDegree',
    'field_ucsfeds_displayname' => 'displayName',
    'field_ucsfeds_email' => 'mail',
    'field_ucsfeds_emailreleasecode' => 'ucsfEduMailReleaseCode',
    'field_ucsfeds_entryreleasecode' => 'ucsfEduEntryReleaseCode',
    'field_ucsfeds_fax' => 'facsimileTelephoneNumber',
    'field_ucsfeds_faxreleasecode' => 'ucsfEduFacsimileTelephoneNumberReleaseCode',
    'field_ucsfeds_firstname' => 'givenName',
    'field_ucsfeds_lastname' => 'sn',
    'field_ucsfeds_middlename' => 'initials',
    'field_ucsfeds_payrolltitle' => 'title',
    'field_ucsfeds_phone' => 'telephoneNumber',
    'field_ucsfeds_phonep' => 'telephoneNumber',
    'field_ucsfeds_phonereleasecode' => 'ucsfEduTelephoneNumberReleaseCode',
    'field_ucsfeds_phonereleasecodep' => 'ucsfEduTelephoneNumberReleaseCode',
    'field_ucsfeds_preferredfirstname' => 'ucsfEduPreferredGivenName',
    'field_ucsfeds_preferredpronoun' => 'ucsfEduPreferredPronoun',
    'field_ucsfeds_primarydeptorunit' => 'ucsfEduDepartmentName',
    'field_ucsfeds_ucid' => 'ucsfEduIDNumber',
    'field_ucsfeds_uid' => 'uid',
    'field_ucsfeds_workingtitle' => 'ucsfEduWorkingTitle',
  ];
}

/**
 * Helper function to get local field name to UCSF Profiles key.
 * Local field names are module defaults.
 * Do not alter this function if your fields are different from the default.
 * Instead, implement hook_ucsf_eds_profiles_node_sync_pre_save().
 */
function ucsf_eds_profiles_profiles_field_map() {
  return [
    'field_ucsfeds_prfawardshonors' => 'AwardOrHonors',
    'field_ucsfeds_prfcollabinterests' => 'CollaborationInterests',
    'field_ucsfeds_prffreetextkw' => 'FreetextKeywords',
    'field_ucsfeds_prfkeywords' => 'Keywords',
    'field_ucsfeds_prfnarrative' => 'Narrative',
    'field_ucsfeds_prfpublications' => 'Publications',
    'field_ucsfeds_prfurl' => 'ProfilesURL',
  ];
}

/**
 * Helper function to get local field name to UCSF Profiles Publications key.
 * Local field names are module defaults.
 * Do not alter this function if your fields are different from the default.
 * Non-default fields are not currently supported.
 */
function ucsf_eds_profiles_publications_field_map() {
  return [
    'title' => 'Title',
    'field_ucsfpfpub_authorlist' => 'AuthorList',
    'field_ucsfpfpub_date' => 'Date',
    'field_ucsfpfpub_pmid' => 'PMID',
    'field_ucsfpfpub_publication' => 'Publication',
    'field_ucsfpfpub_publicationid' => 'PublicationID',
    'field_ucsfpfpub_sourcename' => 'PublicationSourceName',
    'field_ucsfpfpub_sourceurl' => 'PublicationSourceURL',
  ];
}

/**
 * Executes messenger service and logger service calls.
 *
 * @param string $type
 * @param string $message
 * @param array $vars
 */
function ucsf_eds_profiles_message_log($type, $message, $vars=array()) {
  $messenger = \Drupal::messenger();
  $logger = \Drupal::logger('ucsf_eds_profiles');
  switch ($type) {
    case 'status':
      $messenger->addStatus(t($message, $vars));
      $logger->notice($message, $vars);
      break;
    case 'warning':
      $messenger->addWarning(t($message, $vars));
      $logger->warning($message, $vars);
      break;
    case 'error':
      $messenger->addError(t($message, $vars));
      $logger->error($message, $vars);
      break;
    default:
      $logger->log($type, $message, $vars);
  }
}